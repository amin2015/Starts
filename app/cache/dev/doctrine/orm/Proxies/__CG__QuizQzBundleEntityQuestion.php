<?php

namespace Proxies\__CG__\Quiz\QzBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Question extends \Quiz\QzBundle\Entity\Question implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'id', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'questionnaireId', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'questionText', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'questionTextEn', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'attachement', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'responseType', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'position', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'mode', 'attachement_file');
        }

        return array('__isInitialized__', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'id', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'questionnaireId', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'questionText', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'questionTextEn', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'attachement', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'responseType', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'position', '' . "\0" . 'Quiz\\QzBundle\\Entity\\Question' . "\0" . 'mode', 'attachement_file');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Question $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionnaireId($questionnaireId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionnaireId', array($questionnaireId));

        return parent::setQuestionnaireId($questionnaireId);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionnaireId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionnaireId', array());

        return parent::getQuestionnaireId();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionText($questionText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionText', array($questionText));

        return parent::setQuestionText($questionText);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionText', array());

        return parent::getQuestionText();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuestionTextEn($questionTextEn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuestionTextEn', array($questionTextEn));

        return parent::setQuestionTextEn($questionTextEn);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuestionTextEn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuestionTextEn', array());

        return parent::getQuestionTextEn();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachement($attachement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachement', array($attachement));

        return parent::setAttachement($attachement);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachement', array());

        return parent::getAttachement();
    }

    /**
     * {@inheritDoc}
     */
    public function setResponseType($responseType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResponseType', array($responseType));

        return parent::setResponseType($responseType);
    }

    /**
     * {@inheritDoc}
     */
    public function getResponseType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResponseType', array());

        return parent::getResponseType();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', array($position));

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', array());

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setMode($mode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMode', array($mode));

        return parent::setMode($mode);
    }

    /**
     * {@inheritDoc}
     */
    public function getMode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMode', array());

        return parent::getMode();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbsolutePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbsolutePath', array());

        return parent::getAbsolutePath();
    }

    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', array());

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpload', array());

        return parent::preUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function upload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upload', array());

        return parent::upload();
    }

    /**
     * {@inheritDoc}
     */
    public function removeUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUpload', array());

        return parent::removeUpload();
    }

}
